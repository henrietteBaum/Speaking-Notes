{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Web-Speech-API\n\nSources:\nhttps://hacks.mozilla.org/2016/01/firefox-and-the-web-speech-api/\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API#speech_synthesis\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API\n\nhttps://developer.chrome.com/blog/web-apps-that-talk-introduction-to-the-speech-synthesis-api/\n\nhttps://www.sitepoint.com/talking-web-pages-and-the-speech-synthesis-api/\n\nhttps://wicg.github.io/speech-api/#tts-section"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\n\nStartpunkt ist `window.SpechSynthesis` , diese liefert ein Objekt zurück."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const synth = window.SpeechSynthesis;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Stimmenauswahl\nHierfür wird zunächst ein leeres Array erstellt, das dann die auf dem Betriebssystem verfügbaren Stimmen aufnimmt. \nDie Funktion `populateVoiceList()` füllt das Array, das\ndann dazu dient, die Stimmen in einem select-Element als Optionen zur Auswahl für den Benutzer zur Verfügung zu stellen. "
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let voiceList = [];\n\nvoiceList = SpeechSynthesis.getVoices();\n// oder\nconst synth = window.SpeechSynthesis;\nvoiceList = synth.getVoices();"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Die Funktion `getVoices()`liefert eine Liste der verfügbaren Stimmen. Jede Stimme ist ein Objekt, jeweil mit den Attributen (u.a.) `name` , `lang` und eine default-Wert `--DEFAULT`. Der default-Wert liegt vor,  wenn die gewählte Stimme die Standardstimme für die Sprachausgabe ist (also wenn `SpeechSynthesisVoice.default` den Wert `true` liefert).\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "speechSynthesis.getVoices().forEach((voice) => {\n  console.log(voice.name, voice.default ? voice.default :'');\n});"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Sind Stimmen-Array und speechSynthesis in einer Variablen gespeichert verkürzt sich der Ausdruck:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "synth = window.SpeechSynthesis;\nvoiceList = [];\n\nvoiceList = synth.getVoices()\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Die Liste auf der Konsole ausgeben:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "voiceList.forEach((voice) => {\n  console.log(voice.name, voice.default ? voice.default :'');\n});"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Die ausgewählte Stimme für die Sprachausgabe verwenden:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let utterance = new SpeechSynthesisUtterance('hello learning users!');\nurrerance.voice = speechSynthesis.getVoices().filter(function(voice) { return voice.name == 'Whisper'; })[0];\nspeechSynthesis.speak(urrerance);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Mit zuvor gespeicherter `voiceList` und Arrow-function:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let utterance = new SpeechSynthesisUtterance('hello learning users!');\nurrerance.voice = voiceList.filter((voice) => { \n  return voice.lang == 'de-DE'; })[0];\nspeechSynthesis.speak(urrerance);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Oder die Stimmenauswahl in einer Variablen speichern:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let deVoice = voiceList.filter((voice) => { \n  return voice.lang == 'de-DE'; })[0];"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Und die Variable `deVoice`für die Sprachausgabe verwenden:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let utterance = new SpeechSynthesisUtterance('hello learning users!');\nurrerance.voice = deVoice;\nspeechSynthesis.speak(urrerance);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Dropdown für die Stimmenauswahl\n\nStatt wie im Beispiel oben das Array mit den gespeicherten Stimmen zu nach Sprache zu filtern und dann die erste Stimme aus dem gefilterten Array (`voiceList...[0]`) für die Sprachausgabe zu nutzen, kann ein Dropdown-Menu zur Stimmauswahl durch den Benutzer eingefügt werden."
            ],
            "outputs": []
        },
        {
            "language": "html",
            "source": [
                "<select> Select a voice\n  <option>voice</option>\n</select>"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<select> Select a voice",
                                "  <option>voice</option>",
                                "</select>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Um die Stimmen in das `<select>` -tag als Opttion einzufügen, wird über die Liste mit `for` oder, wie oben mit `forEach` iteriert und für jede Stimme ein `<option>` - Element erzeugt, dessen Text den Namen der Stimme und deren Sprache anzeigt: `SpeechSyntehsis.name` und `SpeechSynthesis.lang` ."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "function populateVoiceList() {\n  voiceList = synth.getVoices();\n\n  for (i = 0; i < voiceList.length; i++) {\n    let option = document.createElement('option');\n    option.textContent = voiceList[i].name + ' (' + voiceList[i].lang + ')';\n\n    if (voices[i].default) {\n      option.textContent += ' -- DEFAULT';\n    }\n\n    option.setAttribute('data-lang', voiceList[i].lang);\n    option.setAttribute('data-name', voiceList[i].name);\n    voiceSelect.appendChild(option);\n  }\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Exkurs: HTML data attribute\nhttps://www.w3schools.com/tags/att_data-.asp\nhttps://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_global_data\n\nhttps://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes\n\nOben: `data-lang` und `data-name` \n\nDas `data-*`-Attribut wird verwendet, um eigene, benutzerdefinierte Daten zu speichern, die der Seite oder Anwendung vorbehalten sind.\n\nDas `data-*`-Attribut gibt uns die Möglichkeit, benutzerdefinierte Datenattribute in alle HTML-Elemente einzubetten.\n\nDie gespeicherten (benutzerdefinierten) Daten können dann im JavaScript der Seite verwendet werden, um die Benutzerfreundlichkeit zu erhöhen (ohne Ajax-Aufrufe oder serverseitige Datenbankabfragen).\n\nDas `data-*`-Attribut besteht aus zwei Teilen:\n\n    - dem Präfix \"data-\" \n    - und dem Attributnamen\n\n\n    Der Attributname darf keine Großbuchstaben enthalten und muss nach dem Präfix \"data-\" mindestens ein Zeichen lang sein.\n    Der Attributwert kann eine beliebige Zeichenkette sein.\n\nHinweis: Benutzerdefinierte Attribute, denen das Präfix \"data-\" vorangestellt ist, werden vom User-Agent vollständig ignoriert und sind auch für Screenreader nicht zugänglich."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Der Aufruf der Funktion `populateVoiceList()` erfolgt mit einer if-bedingung, weil Firefox die Funktion `SpeechSynthesis.onVoiceChanged` nicht unterstützt."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "populateVoiceList();\nif (speechSynthesis.onvoiceschanged !== undefined) {\n  speechSynthesis.onvoiceschanged = populateVoiceList;\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## SpeechSynthesisUtterance\n\nDer vorzulesende Text wird durch Benuthereingabe in einem Textfeld erzeugt und in einer Variablen gespeichert."
            ],
            "outputs": []
        },
        {
            "language": "html",
            "source": [
                "<label for=\"note-text\">Text:</label>\n<textarea id=\"note-text\"></textarea>"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<label for=\"text\">Text:</label>",
                                "<textarea id=\"text\"></textarea>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Den Textinhalt des `<textarea>` erhält man über das Attribut `value`."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let noteText = document.getElementById('note-text').value;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Statt direkt einen konkreten Text zu übergeben, wie hier:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let utterance = new SpeechSynthesisUtterance('hello learning users!');"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "kann man nun `noteText` an SpeechSynthesisUtterance übergeben"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let utterance = new SpeechSynthesisUtterance(noteText);"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "oder so:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "let utterance = new SpeechSynthesisUtterance();\nutterance.voice = noteText;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Sprachausgabe starten\n\nDer Start der Sprachausgabe wird mit einem EventHandler eines Buttons oder der `onSubmit` - Funktion eines Formulars gesteuert. \nDer vorzulesende Text wird durch Benutzereingabe in einem Textfeld erzeugt (oder eine Datei wird geladen) und in einer Variablen gespeichert.\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "\nDann wird über eine Konstruktor ein neues Objekt von `SpeechSynthesisUtterance`  erzeugt, das als Parameter die Variable mit dem gespeicherten Text erhält. \n\nDie zum Vorlesen zu verwendende Stimme \n- liefert die Eigensxhaft `selectedOption` des HTML `<select>`- Elements oder\n- wird aus der Stimmenliste ggf. über einen Filter bereits vom Entwickler vorgegeben \n- wird keine Stimme festglegt, wird die default- Stimme des Betriebssystem beunutz.\n\nZusätzlich können in gleicher Weise Sprechgeschwindigkeit und Stimmhöhe bestimmt werden.\n"
            ],
            "outputs": []
        },
        {
            "language": "html",
            "source": [
                "<div>\n    <label for=\"rate\">Rate</label><input type=\"range\" min=\"0.5\" max=\"2\" value=\"1\" step=\"0.1\" id=\"rate\">\n    <div class=\"rate-value\">1</div>\n    <div class=\"clearfix\"></div>\n</div>\n<div>\n    <label for=\"pitch\">Pitch</label><input type=\"range\" min=\"0.5\" max=\"2\" value=\"1\" step=\"0.1\" id=\"pitch\">\n    <div class=\"pitch-value\">1</div>\n    <div class=\"clearfix\"></div>\n</div>"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<div>",
                                "    <label for=\"rate\">Rate</label><input type=\"range\" min=\"0.5\" max=\"2\" value=\"1\" step=\"0.1\" id=\"rate\">",
                                "    <div class=\"rate-value\">1</div>",
                                "    <div class=\"clearfix\"></div>",
                                "</div>",
                                "<div>",
                                "    <label for=\"pitch\">Pitch</label><input type=\"range\" min=\"0.5\" max=\"2\" value=\"1\" step=\"0.1\" id=\"pitch\">",
                                "    <div class=\"pitch-value\">1</div>",
                                "    <div class=\"clearfix\"></div>",
                                "</div>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "pitch.onchange = function () {\n  pitchValue.textContent = pitch.value;\n}\n\nrate.onchange = function () {\n  rateValue.textContent = rate.value;\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Abschließend wird die Funktion `speak()` mit dem `SpeechSynthesisUtterance` - Objekt, also dem in der Variablen `utterThis` gespeicherten Text als Attribut, aufgerufen."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "inputForm.onsubmit = function (event) {\n\n  event.preventDefault();\n\n  let utterThis = new SpeechSynthesisUtterance(inputTxt.value);\n  let selectedOption = voiceSelect.selectedOptions[0].getAttribute('data-name');\n  for (i = 0; i < voices.length; i++) {\n    if (voices[i].name === selectedOption) {\n      utterThis.voice = voices[i];\n    }\n  }\n  utterThis.pitch = pitch.value;\n  utterThis.rate = rate.value;\n  synth.speak(utterThis);\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "___\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Pause, Beispiel:\nWenn SpeechSynthesis.pause() aufgerufen wird, wird eine Meldung zurückgegeben, die die Zeichennummer und den Namen angibt, bei denen die Sprachausgabe pausiert wurde."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "utterThis.onpause = function (event) {\n  var char = event.utterance.text.charAt(event.charIndex);\n  console.log('Speech paused at character ' + event.charIndex + ' of \"' +\n    event.utterance.text + '\", which is \"' + char + '\".');\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "var synth = window.speechSynthesis;\n\nvar utterance1 = new SpeechSynthesisUtterance('How about we say this now? This is quite a long sentence to say.');\nvar utterance2 = new SpeechSynthesisUtterance('We should say another sentence too, just to be on the safe side.');\n\nsynth.speak(utterance1);\nsynth.speak(utterance2);\n\nsynth.pause(); // pauses utterances being spoken\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Ein vollständige Javascript-Beispiel:\n\nQuelle: https://www.sitepoint.com/talking-web-pages-and-the-speech-synthesis-api/\n\nfunktioniert nicht"
            ],
            "outputs": []
        },
        {
            "language": "html",
            "source": [
                "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    <title>Speech Synthesis API Demo</title>\n    <style>\n      *\n      {\n        -webkit-box-sizing: border-box;\n        -moz-box-sizing: border-box;\n        box-sizing: border-box;\n      }\n\n      body\n      {\n        max-width: 500px;\n        margin: 2em auto;\n        padding: 0 0.5em;\n        font-size: 20px;\n      }\n\n      h1,\n      .buttons-wrapper\n      {\n        text-align: center;\n      }\n\n      .hidden\n      {\n        display: none;\n      }\n\n      #text,\n      #log\n      {\n        display: block;\n        width: 100%;\n        height: 5em;\n        overflow-y: scroll;\n        border: 1px solid #333333;\n        line-height: 1.3em;\n      }\n\n      .field-wrapper\n      {\n        margin-top: 0.2em;\n      }\n\n      .button-demo\n      {\n        padding: 0.5em;\n        display: inline-block;\n        margin: 1em auto;\n      }\n    </style>\n  </head>\n  \n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<!DOCTYPE html>",
                                "<html>",
                                "  <head>",
                                "    <meta charset=\"UTF-8\">",
                                "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>",
                                "    <title>Speech Synthesis API Demo</title>",
                                "    <style>",
                                "      *",
                                "      {",
                                "        -webkit-box-sizing: border-box;",
                                "        -moz-box-sizing: border-box;",
                                "        box-sizing: border-box;",
                                "      }",
                                "",
                                "      body",
                                "      {",
                                "        max-width: 500px;",
                                "        margin: 2em auto;",
                                "        padding: 0 0.5em;",
                                "        font-size: 20px;",
                                "      }",
                                "",
                                "      h1,",
                                "      .buttons-wrapper",
                                "      {",
                                "        text-align: center;",
                                "      }",
                                "",
                                "      .hidden",
                                "      {",
                                "        display: none;",
                                "      }",
                                "",
                                "      #text,",
                                "      #log",
                                "      {",
                                "        display: block;",
                                "        width: 100%;",
                                "        height: 5em;",
                                "        overflow-y: scroll;",
                                "        border: 1px solid #333333;",
                                "        line-height: 1.3em;",
                                "      }",
                                "",
                                "      .field-wrapper",
                                "      {",
                                "        margin-top: 0.2em;",
                                "      }",
                                "",
                                "      .button-demo",
                                "      {",
                                "        padding: 0.5em;",
                                "        display: inline-block;",
                                "        margin: 1em auto;",
                                "      }",
                                "    </style>",
                                "  </head>",
                                "  ",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "html",
            "source": [
                "  <body>\n    <h1>Speech Synthesis API</h1>\n\n    <h3>Play area</h3>\n    <form action=\"\" method=\"get\">\n      <label for=\"text\">Text:</label>\n      <textarea id=\"text\"></textarea>\n      <div class=\"field-wrapper\">\n        <label for=\"voice\">Voice:</label>\n        <select id=\"voice\"></select>\n      </div>\n      <div class=\"field-wrapper\">\n        <label for=\"rate\">Rate (0.1 - 10):</label>\n        <input type=\"number\" id=\"rate\" min=\"0.1\" max=\"10\" value=\"1\" step=\"any\" />\n      </div>\n      <div class=\"field-wrapper\">\n        <label for=\"pitch\">Pitch (0.1 - 2):</label>\n        <input type=\"number\" id=\"pitch\" min=\"0.1\" max=\"2\" value=\"1\" step=\"any\" />\n      </div>\n      <div class=\"buttons-wrapper\">\n        <button id=\"button-speak-ss\" class=\"button-demo\">Speak</button>\n        <button id=\"button-stop-ss\" class=\"button-demo\">Stop</button>\n        <button id=\"button-pause-ss\" class=\"button-demo\">Pause</button>\n        <button id=\"button-resume-ss\" class=\"button-demo\">Resume</button>\n      </div>\n    </form>\n\n    <span id=\"ss-unsupported\" class=\"hidden\">API not supported</span>\n\n    <h3>Log</h3>\n    <div id=\"log\"></div>\n    <button id=\"clear-all\" class=\"button-demo\">Clear all</button>\n\n    <script>\n      // Test browser support\n      if (window.SpeechSynthesisUtterance === undefined) {\n        document.getElementById('ss-unsupported').classList.remove('hidden');\n        ['button-speak-ss', 'button-stop-ss', 'button-pause-ss', 'button-resume-ss'].forEach(function(elementId) {\n          document.getElementById(elementId).setAttribute('disabled', 'disabled');\n        });\n      } else {\n        var text = document.getElementById('text');\n        var voices = document.getElementById('voice');\n        var rate = document.getElementById('rate');\n        var pitch = document.getElementById('pitch');\n        var log = document.getElementById('log');\n\n        // Workaround for a Chrome issue (#340160 - https://code.google.com/p/chromium/issues/detail?id=340160)\n        var watch = setInterval(function() {\n          // Load all voices available\n          var voicesAvailable = speechSynthesis.getVoices();\n\n          if (voicesAvailable.length !== 0) {\n            for(var i = 0; i < voicesAvailable.length; i++) {\n              voices.innerHTML += '<option value=\"' + voicesAvailable[i].lang + '\"' +\n                                  'data-voice-uri=\"' + voicesAvailable[i].voiceURI + '\">' +\n                                  voicesAvailable[i].name +\n                                  (voicesAvailable[i].default ? ' (default)' : '') + '</option>';\n            }\n\n            clearInterval(watch);\n          }\n        }, 1);\n\n        document.getElementById('button-speak-ss').addEventListener('click', function(event) {\n          event.preventDefault();\n\n          var selectedVoice = voices.options[voices.selectedIndex];\n\n          // Create the utterance object setting the chosen parameters\n          var utterance = new SpeechSynthesisUtterance();\n\n          utterance.text = text.value;\n          utterance.voice = selectedVoice.getAttribute('data-voice-uri');\n          utterance.lang = selectedVoice.value;\n          utterance.rate = rate.value;\n          utterance.pitch = pitch.value;\n\n          utterance.onstart = function() {\n            log.innerHTML = 'Speaker started' + '<br />' + log.innerHTML;\n          };\n\n          utterance.onend = function() {\n            log.innerHTML = 'Speaker finished' + '<br />' + log.innerHTML;\n          };\n\n          window.speechSynthesis.speak(utterance);\n        });\n\n        document.getElementById('button-stop-ss').addEventListener('click', function(event) {\n          event.preventDefault();\n\n          window.speechSynthesis.cancel();\n          log.innerHTML = 'Speaker stopped' + '<br />' + log.innerHTML;\n        });\n\n        document.getElementById('button-pause-ss').addEventListener('click', function(event) {\n          event.preventDefault();\n\n          window.speechSynthesis.pause();\n          log.innerHTML = 'Speaker paused' + '<br />' + log.innerHTML;\n        });\n\n        document.getElementById('button-resume-ss').addEventListener('click', function(event) {\n          event.preventDefault();\n\n          if (window.speechSynthesis.paused === true) {\n            window.speechSynthesis.resume();\n            log.innerHTML = 'Speaker resumed' + '<br />' + log.innerHTML;\n          } else {\n            log.innerHTML = 'Unable to resume. Speaker is not paused.' + '<br />' + log.innerHTML;\n          }\n        });\n\n        document.getElementById('clear-all').addEventListener('click', function() {\n          log.textContent = '';\n        });\n      }\n    </script>\n  </body>\n</html>"
            ],
            "outputs": []
        },
        {
            "language": "html",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "___\n\n## React.js"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## SpeechSynthesis\n\nDies ist sozusagen der Startpunkt für jede Implementierung.\n\nDas SpeechSynthesis-Objekt muss nicht instanziiert werden. Es gehört zum Window-Objekt und kann direkt verwendet werden. Dieses Objekt stellt mehrere Methoden zur Verfügung, wie zum Beispiel:\n\n- speak() - Akzeptiert ein SpeechSynthesisUtterance Objekt als einzigen Parameter. Diese Methode wird verwendet, um eine Äußerung zu synthetisieren.\n- stop() - Beendet sofort die Sprachausgabe.\n- pause() - Unterbricht die Sprachausgabe.\n- resume() - Setzt die Sprachausgabe fort.\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import React, { useEffect, useRef, useState } from \"react\";\nimport StyledButton from \"../styles/Button.style\";\nimport { StyledSelect } from \"../styles/Select.style\";\nimport StyledSidebar from \"../styles/Sidebar.style\";\n\n\nconst useSpeechSynthesis = () => {\n  const [voiceList, setVoiceList] = useState([]);\n  const synthRef = useRef();\n\n  const updateVoiceList = () => {\n    setVoiceList(synthRef.current.getVoices());\n  };\n\n  const speak = (text, voice, pitch = 1, rate = 1) => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.voice = voice;\n    utterance.pitch = pitch;\n    utterance.rate = rate;\n    synthRef.current.speak(utterance);\n  }\n\n  useEffect(() => {\n    if (typeof window !== 'object' || !window.speechSynthesis) return;\n    synthRef.current = window.speechSynthesis;\n    synthRef.current.onvoiceschanged = updateVoiceList;\n    updateVoiceList();\n\n    return () => {\n      synthRef.current.onvoiceschanged = null\n    }\n  }, []);\n\n  return ([\n    voiceList,\n    speak,\n  ]);\n}\n\nconst WebSpeech = ({ noteText }) => {\n  const [voiceList, speak] = useSpeechSynthesis();\n  const [currentVoice, setCurrentVoice] = useState();\n\n  useEffect(() => {\n    if (!currentVoice) {\n      setCurrentVoice(voiceList.filter(v => v.default)[0] || voiceList[0]);\n    }\n  }, [voiceList])\n\n  const handleVoiceChange = e => {\n    setCurrentVoice(voiceList.filter(v => v.name === e.target.value)[0]);\n  }\n\n\n  const handleSpeak = e => {\n    e.preventDefault();\n    speak(noteText, currentVoice);\n  }\n\n  return (\n    <>\n      <StyledSidebar>\n        <StyledButton\n          onClick={handleSpeak}\n        >Speak</StyledButton>\n      </StyledSidebar>\n      <StyledSelect\n        value={currentVoice ? currentVoice.name : 'Voice'}\n        onChange={handleVoiceChange}>\n        <option>Voice</option>\n        {voiceList.map(opt => (\n          <option key={opt.name} value={opt.name}>{`${opt.name}`}</option>\n        ))}\n      </StyledSelect>\n    </>\n  );\n};\n\nexport default WebSpeech\n\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.error",
                            "value": {
                                "name": "Error",
                                "message": "Failed to generate code object, \n        < Select_style_1.StyledSelect;\n                   ^\n\nUnterminated regular expression",
                                "stack": ""
                            }
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### SpeechSynthesisUtterance\n\n(engl. Utterance = Äußerung, Wortlaut, Nachricht Aussage)\n\nDies ist ein Objekt, das den zu sprechenden Text enthält, aber auch weitere Attribute wie `voice, lang, rate, pitch` enthalten kann.\n\nDazu wird ein neues Objekt erzeugt und in einer Variablen gespeichert."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const utterance = SpeechSynthesisUtterance()"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Der zu sprechende Text kann entweder direkt übergeben werden:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const utterance = SpeechSynthesisUtterance('Lies mir etwas Nettes vor.')"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "oder später als Parameter übergeben werden:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const utterance = SpeechSynthesisUtterance();\nutterance.text = 'Lies mir etwas Nettes vor.';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "oder als Variabele oder State übergeben werden:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const utterance = SpeechSynthesisUtterance();\nutterance.text = {noteText};\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "In gleicher Weise werden auch - optional - weitere Argumente, wie Sprache, Stimme oder Sprechgeschwindigkeit angehängt:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const utterance = SpeechSynthesisUtterance();\nutterance.text = {noteText};\nutterance.lang = 'de-DE';\nutterance.rate = 1.1;"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Das Objekt stellt zudem verschiedene Methoden zur Verfügung:\n\n`onstart` - Legt einen Callback fest, der ausgelöst wird, wenn die Sprachsynthese beginnt.\n`onpause` - Legt einen Callback fest, der ausgelöst wird, wenn die Sprachsynthese pausiert wird.\n`onresume` - Legt einen Callback fest, der ausgelöst wird, wenn die Sprachsynthese wiederaufgenommen wird.\n`onend` - Definiert einen Callback, der ausgelöst wird, wenn die Sprachsynthese beendet wird.\n\nDas SpeechSynthesisUtterance- Objekt muss dann noch mit einem Sprachsynthesizer `SpeechSynthesis` verbunden werden."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Auswahl der Stimme\n\nMit der Methode `getVoices()` wird verwendet, um die Liste (ein Array) der im jeweiligen Browser verfügbaren Stimmen abzurufen. Sie akzeptiert keine Argumente Jeder Eintrag in der Liste enthält Informationen wie `name`, einen sprechenden Namen, um den Entwicklern einen Hinweis auf die Stimme zu geben (z. B. \"Google US English\"), `lang`, die Sprache der Stimme (z. B. en-GB), und `voiceURI`, den Standort des Sprachsynthesedienstes für diese Stimme.\n\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### react.js - select:\n\nSttatt foreach oder for `map` verwenden, um den tag `<option>`  also die im Dropdown angezeigten Felder mit den Werten (Stimmen) aus dem Array `voiceList` zu füllen. Dabei muss immer Schlüssel-Wert-Paar mit einem eideutigen Schlüssel (key) gesetzt werden. Hier werden zur Vereinfachung die Namen der Stimmen auch gleichzeitig als `key` benutzt, sie kommen nur jeweils einmal in der Liste vor und sind damit eindeutig."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "<select>\n  {voiceList.map(voice => (\n    <option key={voice.name} value={voice.name}>\n      {voice.name} - {voice.lang}\n    </option>\n  ))\n  }\n</select>"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Die ausgewählte Stimme verwenden:\n\nDer EventHandler, der auf den Wert im `<option>` - tag zugreift, muss innerhalb von `<select>`, nicht innerhalb von `<option>` plaziert werden."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "<select\n  className=\"selectVoice\"\n  aria-label=\"select a voice\"\n  onChange={handleVoiceChange}>\n    // ...option...\n</select>"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "<option\n  key={voice.name}\n  value={voice.name}>\n  //...\n</option>"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "`value={voice.name}`  dieses `value`  wird über `e.targe.value` weitergereicht an den  state `currentVoice` \n\n\nDie Fuktion `handleVoiceChange` setzt den state `currentVoice` auf den Wert der aktuell ausgewählten Option, also auf `value`  und dies wiederum ist der Name der ausgewählten Stimme."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const handleVoiceChange = (e) => {\n  setCurrentVoice(e.target.value);\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Nun enthält `currentVoice` die aktuelle Stimme und kann in der Sprachausgabe verwendet werden."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}